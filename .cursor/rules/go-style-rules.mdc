# Go语言代码风格规则

<!-- 
文件职责分工说明：
此文件负责：公司规则、团队规范、流程要求、实验性规则、MCP交互反馈规则
包含：通用礼节、代码设计原则、Bug修复流程、团队协作规范等
适用场景：团队开发、代码审查、Bug修复、项目协作等
-->

## 通用礼节 (General Etiquette)

### 代码设计原则
- **简洁易懂优先**：优先保证代码简洁易懂，避免过度复杂化
- **实用主义**：别搞过度设计，简单实用就好
- **函数设计**：注意圈复杂度，函数尽量小，尽量可以复用，尽量不写重复代码
- **模块设计**：注意模块设计，尽量使用设计模式

### 代码解释要求
- **说人话**：给我解释代码的时候，说人话，别拽专业术语
- **可视化**：最好有图（mermaid风格）
- **原理说明**：帮我实现的时候，需要给出原理，并给出执行步骤
- **完整阅读**：改动或者解释前，最好看看所有代码，不能偷懒

### 代码修改原则
- **最小化修改**：改动前，要做最小化修改，尽量不修改到其他模块的代码
- **测试覆盖**：改动后，假定10条case输入，并给出预期结果

### Mermaid图表要求
- **语法自检**：给出的mermaid图，必须自检语法，可以被渲染
- **暗黑主题适配**：在暗黑主题上清晰可见，必须要可以被暗黑主题渲染清晰

## Go语言特定规则

### 命名规范
- 包名：使用小写字母，避免下划线
- 函数名：使用驼峰命名法，如 `ValidatePhone`
- 变量名：使用驼峰命名法，如 `phoneNumber`
- 常量名：使用驼峰命名法，如 `MaxLength`

### 代码结构
- 每个函数都应该有清晰的注释说明功能、时间复杂度和空间复杂度
- 使用 `//` 进行单行注释，`/* */` 进行多行注释
- 函数参数和返回值应该有类型注解

### 错误处理
- 优先返回错误值而不是panic
- 使用有意义的错误信息
- 在测试中验证错误情况

### 测试规范
- 每个函数都应该有对应的测试函数
- 测试用例应该覆盖正常情况和边界情况
- 测试函数名格式：`Test函数名`
- 使用表驱动测试模式

## 实验性规则 (Experimental Rule)

当你被要求修复一个 Bug 时，请遵循以下步骤：

1. **理解问题 (Understand)**：仔细阅读 Bug 描述和相关代码，复述你对问题的理解
2. **分析原因 (Analyze)**：提出至少两种可能的根本原因
3. **制定计划 (Plan)**：描述你打算如何验证这些原因，并给出修复方案
4. **请求确认 (Confirm)**：在动手修改前，向我确认你的计划
5. **执行修复 (Execute)**：实施修复
6. **审查 (Review)**：查看自己的修改有没有问题
7. **解释说明 (Explain)**：解释你做了哪些修改以及为什么

## MCP Interactive Feedback 规则

1. 在任何流程、任务、对话进行时，无论是询问、回复、或完成阶段性任务，皆必须调用 MCP mcp-feedback-enhanced
2. 每当收到用户反馈，若反馈内容非空，必须再次调用 MCP mcp-feedback-enhanced，并根据反馈内容调整行为
3. 仅当用户明确表示「结束」或「不再需要交互」时，才可停止调用 MCP mcp-feedback-enhanced，流程才算结束
4. 除非收到结束指令，否则所有步骤都必须重复调用 MCP mcp-feedback-enhanced
5. 完成任务前，必须使用 MCP mcp-feedback-enhanced 工具向用户询问反馈

## 代码示例

### 好的函数设计示例
```go
// ValidatePhone 验证中国大陆手机号是否合法
// 参数：phone - 手机号字符串
// 返回：bool - 是否合法
// 时间复杂度：O(1)
// 空间复杂度：O(1)
func ValidatePhone(phone string) bool {
    // 中国大陆手机号正则：1开头，第二位3-9，后面9位0-9，共11位
    var re = regexp.MustCompile(`^1[3-9]\d{9}$`)
    return re.MatchString(phone)
}
```

### 好的测试设计示例
```go
func TestValidatePhone(t *testing.T) {
    tests := []struct {
        input    string
        expected bool
    }{
        {"13812345678", true},   // 合法
        {"19912345678", true},   // 合法
        {"12345678901", false},  // 非法，第二位不是3-9
        {"1381234567", false},   // 非法，长度不足
        {"23812345678", false},  // 非法，首位不是1
        {"138123456789", false}, // 非法，长度超出
    }
    
    for _, tt := range tests {
        if got := ValidatePhone(tt.input); got != tt.expected {
            t.Errorf("ValidatePhone(%q) = %v; want %v", tt.input, got, tt.expected)
        }
    }
}
```

## 流程图示例

### 手机号验证流程
```mermaid
flowchart TD
    A[输入手机号] --> B{长度是否为11位?}
    B -->|否| C[返回false]
    B -->|是| D{首位是否为1?}
    D -->|否| C
    D -->|是| E{第二位是否为3-9?}
    E -->|否| C
    E -->|是| F{其余位是否为数字?}
    F -->|否| C
    F -->|是| G[返回true]
    
    style A fill:#e1f5fe
    style G fill:#c8e6c9
    style C fill:#ffcdd2
```

### 链表环检测流程（快慢指针）
```mermaid
flowchart TD
    A[初始化快慢指针] --> B{快指针是否到达末尾?}
    B -->|是| C[返回false，无环]
    B -->|否| D{快慢指针是否相遇?}
    D -->|是| E[返回true，有环]
    D -->|否| F[慢指针移动一步]
    F --> G[快指针移动两步]
    G --> B
    
    style A fill:#e1f5fe
    style C fill:#c8e6c9
    style E fill:#ffcdd2
```
description:
globs:
alwaysApply: false
---
